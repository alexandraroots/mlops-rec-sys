name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alexandraroots/mlops-rec-sys

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Install test and lint dependencies
      run: |
        pip install flake8 black pylint pytest

    - name: Lint with flake8
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check src/

    - name: Run pylint
      run: |
        pylint src/ --disable=all --enable=E,F --fail-under=8

    - name: Run unit tests
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --cov=src --cov-report=xml
        else
          echo "No tests directory found, running basic import test"
          python -c "import sys; sys.path.append('src'); from mlops_rec_sys import __version__; print(f'Version: {__version__}')"
        fi

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug image name
        run: |
          echo "Building image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "GitHub Actor: ${{ github.actor }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check GHCR_TOKEN exists
        run: |
          if [ -z "${{ secrets.GHCR_TOKEN }}" ]; then
            echo "ERROR: GHCR_TOKEN secret is not set!"
            exit 1
          else
            echo "GHCR_TOKEN is set correctly"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Test GHCR access
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin && echo "Login successful!"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: List pushed images
        run: |
          echo "Successfully pushed images:"
          echo "${{ steps.meta.outputs.tags }}"

  deploy-railway:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check RAILWAY_TOKEN exists
      run: |
        if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
          echo "ERROR: RAILWAY_TOKEN secret is not set!"
          exit 1
        else
          echo "RAILWAY_TOKEN is set correctly"
        fi

    - name: Deploy to Railway
      uses: railwayapp/action@v1.1.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: mlops-rec-sys
        environment: production

    - name: Verify deployment
      run: |
        echo "Deployment to Railway completed successfully!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"